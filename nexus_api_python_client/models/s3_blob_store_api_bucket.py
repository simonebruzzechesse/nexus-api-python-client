# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.20.1-01
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class S3BlobStoreApiBucket(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'region': 'str',
        'name': 'str',
        'prefix': 'str',
        'expiration': 'int'
    }

    attribute_map = {
        'region': 'region',
        'name': 'name',
        'prefix': 'prefix',
        'expiration': 'expiration'
    }

    def __init__(self, region=None, name=None, prefix=None, expiration=None, local_vars_configuration=None):  # noqa: E501
        """S3BlobStoreApiBucket - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._region = None
        self._name = None
        self._prefix = None
        self._expiration = None
        self.discriminator = None

        self.region = region
        self.name = name
        if prefix is not None:
            self.prefix = prefix
        self.expiration = expiration

    @property
    def region(self):
        """Gets the region of this S3BlobStoreApiBucket.  # noqa: E501

        The AWS region to create a new S3 bucket in or an existing S3 bucket's region  # noqa: E501

        :return: The region of this S3BlobStoreApiBucket.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this S3BlobStoreApiBucket.

        The AWS region to create a new S3 bucket in or an existing S3 bucket's region  # noqa: E501

        :param region: The region of this S3BlobStoreApiBucket.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def name(self):
        """Gets the name of this S3BlobStoreApiBucket.  # noqa: E501

        The name of the S3 bucket  # noqa: E501

        :return: The name of this S3BlobStoreApiBucket.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this S3BlobStoreApiBucket.

        The name of the S3 bucket  # noqa: E501

        :param name: The name of this S3BlobStoreApiBucket.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def prefix(self):
        """Gets the prefix of this S3BlobStoreApiBucket.  # noqa: E501

        The S3 blob store (i.e S3 object) key prefix  # noqa: E501

        :return: The prefix of this S3BlobStoreApiBucket.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this S3BlobStoreApiBucket.

        The S3 blob store (i.e S3 object) key prefix  # noqa: E501

        :param prefix: The prefix of this S3BlobStoreApiBucket.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def expiration(self):
        """Gets the expiration of this S3BlobStoreApiBucket.  # noqa: E501

        How many days until deleted blobs are finally removed from the S3 bucket (-1 to disable)  # noqa: E501

        :return: The expiration of this S3BlobStoreApiBucket.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this S3BlobStoreApiBucket.

        How many days until deleted blobs are finally removed from the S3 bucket (-1 to disable)  # noqa: E501

        :param expiration: The expiration of this S3BlobStoreApiBucket.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expiration is None:  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3BlobStoreApiBucket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, S3BlobStoreApiBucket):
            return True

        return self.to_dict() != other.to_dict()
