# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.20.1-01
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nexus_api_python_client.configuration import Configuration


class TaskXO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'message': 'str',
        'current_state': 'str',
        'last_run_result': 'str',
        'next_run': 'datetime',
        'last_run': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'message': 'message',
        'current_state': 'currentState',
        'last_run_result': 'lastRunResult',
        'next_run': 'nextRun',
        'last_run': 'lastRun'
    }

    def __init__(self, id=None, name=None, type=None, message=None, current_state=None, last_run_result=None, next_run=None, last_run=None, local_vars_configuration=None):  # noqa: E501
        """TaskXO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._message = None
        self._current_state = None
        self._last_run_result = None
        self._next_run = None
        self._last_run = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if message is not None:
            self.message = message
        if current_state is not None:
            self.current_state = current_state
        if last_run_result is not None:
            self.last_run_result = last_run_result
        if next_run is not None:
            self.next_run = next_run
        if last_run is not None:
            self.last_run = last_run

    @property
    def id(self):
        """Gets the id of this TaskXO.  # noqa: E501


        :return: The id of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskXO.


        :param id: The id of this TaskXO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaskXO.  # noqa: E501


        :return: The name of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskXO.


        :param name: The name of this TaskXO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this TaskXO.  # noqa: E501


        :return: The type of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskXO.


        :param type: The type of this TaskXO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def message(self):
        """Gets the message of this TaskXO.  # noqa: E501


        :return: The message of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskXO.


        :param message: The message of this TaskXO.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def current_state(self):
        """Gets the current_state of this TaskXO.  # noqa: E501


        :return: The current_state of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this TaskXO.


        :param current_state: The current_state of this TaskXO.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def last_run_result(self):
        """Gets the last_run_result of this TaskXO.  # noqa: E501


        :return: The last_run_result of this TaskXO.  # noqa: E501
        :rtype: str
        """
        return self._last_run_result

    @last_run_result.setter
    def last_run_result(self, last_run_result):
        """Sets the last_run_result of this TaskXO.


        :param last_run_result: The last_run_result of this TaskXO.  # noqa: E501
        :type: str
        """

        self._last_run_result = last_run_result

    @property
    def next_run(self):
        """Gets the next_run of this TaskXO.  # noqa: E501


        :return: The next_run of this TaskXO.  # noqa: E501
        :rtype: datetime
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this TaskXO.


        :param next_run: The next_run of this TaskXO.  # noqa: E501
        :type: datetime
        """

        self._next_run = next_run

    @property
    def last_run(self):
        """Gets the last_run of this TaskXO.  # noqa: E501


        :return: The last_run of this TaskXO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this TaskXO.


        :param last_run: The last_run of this TaskXO.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskXO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskXO):
            return True

        return self.to_dict() != other.to_dict()
