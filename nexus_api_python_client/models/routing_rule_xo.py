# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.20.1-01
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nexus_api_python_client.configuration import Configuration


class RoutingRuleXO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'mode': 'str',
        'matchers': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'mode': 'mode',
        'matchers': 'matchers'
    }

    def __init__(self, name=None, description=None, mode=None, matchers=None, local_vars_configuration=None):  # noqa: E501
        """RoutingRuleXO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._mode = None
        self._matchers = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if mode is not None:
            self.mode = mode
        if matchers is not None:
            self.matchers = matchers

    @property
    def name(self):
        """Gets the name of this RoutingRuleXO.  # noqa: E501


        :return: The name of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutingRuleXO.


        :param name: The name of this RoutingRuleXO.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RoutingRuleXO.  # noqa: E501


        :return: The description of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoutingRuleXO.


        :param description: The description of this RoutingRuleXO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this RoutingRuleXO.  # noqa: E501

        Determines what should be done with requests when their path matches any of the matchers  # noqa: E501

        :return: The mode of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RoutingRuleXO.

        Determines what should be done with requests when their path matches any of the matchers  # noqa: E501

        :param mode: The mode of this RoutingRuleXO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLOCK", "ALLOW"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def matchers(self):
        """Gets the matchers of this RoutingRuleXO.  # noqa: E501

        Regular expressions used to identify request paths that are allowed or blocked (depending on mode)  # noqa: E501

        :return: The matchers of this RoutingRuleXO.  # noqa: E501
        :rtype: list[str]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this RoutingRuleXO.

        Regular expressions used to identify request paths that are allowed or blocked (depending on mode)  # noqa: E501

        :param matchers: The matchers of this RoutingRuleXO.  # noqa: E501
        :type: list[str]
        """

        self._matchers = matchers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingRuleXO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoutingRuleXO):
            return True

        return self.to_dict() != other.to_dict()
